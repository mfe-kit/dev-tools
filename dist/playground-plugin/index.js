import{fileURLToPath as w}from"url";import{Hono as _}from"hono";import{serveStatic as u}from"@hono/node-server/serve-static";import m from"nunjucks";import f from"fs";import a from"path";import v from"js-yaml";import k from"markdown-it";import E from"markdown-it-anchor";import g from"highlight.js/lib/common";var R=w(import.meta.url),l=a.dirname(R);function S(j,d){let r=new _,n;return m.configure(a.join(l,"templates"),{autoescape:!0,watch:!1,noCache:!0}),r.use("/css/*",u({root:a.join(l,"templates")})),r.use("/js/*",u({root:a.join(l,"templates")})),r.use("/assets/*",u({root:a.join(l,"templates")})),r.use("/favicon.png",u({path:a.join(l,"templates/favicon.png")})),r.get("/prerender",async t=>{let e="";if(d.VITE_BACKEND_URL)try{e=await(await fetch(`${d.VITE_BACKEND_URL}/api/prerender`)).text()}catch(o){e=o.message}else e="<h2>No prerender URL provided!(url/api/prerender)</h2>";let s=m.render("./pages/ssr.njk",{manifest:n,data:e});return t.html(s)}),r.get("/ssr",async t=>{let e="";if(d.VITE_BACKEND_URL)try{e=await(await fetch(`${d.VITE_BACKEND_URL}/api/ssr`)).text()}catch(o){e=o.message}else e="<h2>No prerender SSR provided!(url/api/ssr)</h2>";let s=m.render("./pages/ssr.njk",{manifest:n,data:e});return t.html(s)}),r.get("/demo",t=>{let e=m.render("./pages/demo.njk",{manifest:n});return t.html(e)}),r.get("/documentation",t=>{let e=k({highlight:function(p,i){if(i&&g.getLanguage(i))try{return'<pre><code class="hljs">'+g.highlight(p,{language:i,ignoreIllegals:!0}).value+"</code></pre>"}catch{}return'<pre><code class="hljs">'+e.utils.escapeHtml(p)+"</code></pre>"}});e.use(E);let s=a.resolve(`${j}/openmfe/index.md`),o=f.readFileSync(s,"utf8"),h=e.render(o),c=m.render("./pages/docs.njk",{text:h,manifest:n});return t.html(c)}),r.get("/",t=>{let e=m.render("./pages/landing.njk",{manifest:n});return t.html(e)}),{name:"vite:playground-serve",async buildStart(){let t=a.resolve(process.cwd(),"src/manifest.yaml"),e=f.readFileSync(t,"utf8");n=v.load(e,"utf8")},configureServer(t){t.middlewares.use(async(e,s,o)=>{let h=new Request(`http://localhost${e.url}`,{method:e.method,headers:e.headers}),c=await r.fetch(h);if(!c.ok){o();return}s.statusCode=c.status,c.headers.forEach((i,y)=>{s.setHeader(y,i)});let p=await c.arrayBuffer();s.end(Buffer.from(p))})}}}export{S as default};
//# sourceMappingURL=index.js.map
