import{fileURLToPath as w}from"url";import{Hono as _}from"hono";import{serveStatic as h}from"@hono/node-server/serve-static";import m from"nunjucks";import f from"fs";import a from"path";import S from"js-yaml";import v from"markdown-it";import R from"markdown-it-anchor";import g from"highlight.js/lib/common";var k=w(import.meta.url),d=a.dirname(k);function E(y,u){let r=new _,c;return m.configure(a.join(d,"templates"),{autoescape:!0,watch:!1,noCache:!0}),r.use("/css/*",h({root:a.join(d,"templates")})),r.use("/js/*",h({root:a.join(d,"templates")})),r.use("/assets/*",h({root:a.join(d,"templates")})),r.use("/favicon.png",h({path:a.join(d,"templates/favicon.png")})),r.get("/prerender",async t=>{let e="";if(u.VITE_BACKEND_URL)try{e=await(await fetch(`${u.VITE_BACKEND_URL}/api/prerender`)).text()}catch(s){e=s.message}else e="<h2>No prerender URL provided!(url/api/prerender)</h2>";let o=m.render("./pages/ssr.njk",{manifest:c,data:e});return t.html(o)}),r.get("/ssr",async t=>{let e="";if(u.VITE_BACKEND_URL)try{let s=t.req.query(),i=new URLSearchParams(s).toString();e=await(await fetch(`${u.VITE_BACKEND_URL}/api/ssr${i?"?"+i:""}`)).text()}catch(s){e=s.message}else e="<h2>No prerender SSR provided!(url/api/ssr)</h2>";let o=m.render("./pages/ssr.njk",{manifest:c,data:e});return t.html(o)}),r.get("/demo",t=>{let e=m.render("./pages/demo.njk",{manifest:c});return t.html(e)}),r.get("/documentation",t=>{let e=v({highlight:function(p,l){if(l&&g.getLanguage(l))try{return'<pre><code class="hljs">'+g.highlight(p,{language:l,ignoreIllegals:!0}).value+"</code></pre>"}catch{}return'<pre><code class="hljs">'+e.utils.escapeHtml(p)+"</code></pre>"}});e.use(R);let o=a.resolve(`${y}/openmfe/index.md`),s=f.readFileSync(o,"utf8"),i=e.render(s),n=m.render("./pages/docs.njk",{text:i,manifest:c});return t.html(n)}),r.get("/",t=>{let e=m.render("./pages/landing.njk",{manifest:c});return t.html(e)}),{name:"vite:playground-serve",async buildStart(){let t=a.resolve(process.cwd(),"src/manifest.yaml"),e=f.readFileSync(t,"utf8");c=S.load(e,"utf8")},configureServer(t){t.middlewares.use(async(e,o,s)=>{let i=new Request(`http://localhost${e.url}`,{method:e.method,headers:e.headers}),n=await r.fetch(i);if(!n.ok){s();return}o.statusCode=n.status,n.headers.forEach((l,j)=>{o.setHeader(j,l)});let p=await n.arrayBuffer();o.end(Buffer.from(p))})}}}export{E as default};
//# sourceMappingURL=index.js.map
