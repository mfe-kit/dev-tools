{
  "version": 3,
  "sources": ["../../../../src/playground-plugin/templates/js/demo.js"],
  "sourcesContent": ["(function () {\n  const { manifest } = window.PLAYGROUND;\n\n  const CONTENT_ID = 'playground-content';\n  const CONTROLS_ID = 'playground-controls';\n  const CONTROLS_BTN_ID = 'playground-controls-btn';\n\n  function injectMFE() {\n    const component = document.createElement(manifest.tag);\n    const container = document.getElementById(CONTENT_ID);\n    const attributes = getAttributesForMFE();\n    for (const key in attributes) {\n      component.setAttribute(key, attributes[key]);\n    }\n    container.appendChild(component);\n    createControls();\n  }\n\n  function getAttributesForMFE() {\n    const hasQueryParams = window.location.search.length > 1;\n    if (hasQueryParams) {\n      // MFE attributes from query params\n      return getAttributesFromQueryParams();\n    } else {\n      // MFE attributes from manifest\n      setQueryParams(manifest.example.attributes);\n      return manifest.example.attributes;\n    }\n  }\n\n  function createControls() {\n    const elements = [];\n    const controlsContainerEl = document.getElementById(CONTROLS_ID);\n    // generate control using manifest\n    manifest.attributes.forEach((control) => {\n      elements.push(generateControlItem(control));\n    });\n    // add APPLY button to the end of controls\n    elements.push(\n      `<div class=\"item\"><button class=\"apply-btn\" id=\"${CONTROLS_BTN_ID}\">Apply</button></div>`,\n    );\n    controlsContainerEl.innerHTML = elements.join('');\n    // fill controls with values from query/manifest(example)\n    setControlsValues();\n\n    document.getElementById(CONTROLS_BTN_ID).addEventListener('click', (e) => {\n      e.stopPropagation();\n      e.preventDefault();\n      const values = getControlsValues();\n      setQueryParams(values);\n      window.location.reload();\n    });\n  }\n\n  function generateControlItem(control) {\n    let template = '';\n    // generate html select\n    if (control.schema.enum) {\n      const options = control.schema.enum\n        .map((val) => `<option value=\"${val}\">${val}</option>`)\n        .join('');\n\n      template = `\n        <select id=\"${control.name}\" required=\"${control.required}\">\n          ${options}\n        </select>\n      `;\n    } else {\n      // generate html inputs\n      const type = control.schema.type === 'boolean' ? 'checkbox' : 'text';\n      template = `\n        <input id=\"${control.name}\" type=\"${type}\" required=\"${control.required}\"/>\n      `;\n    }\n\n    return `\n      <div class=\"item\">\n        <label for=\"${control.name}\">${control.name}:</label>\n        ${template}\n      </div>\n    `;\n  }\n\n  function getAttributesFromQueryParams() {\n    const params = new URLSearchParams(window.location.search);\n    return Object.fromEntries(params.entries());\n  }\n\n  function getControlsValues() {\n    const controls = {};\n    manifest.attributes.forEach((attribute) => {\n      const el = document.getElementById(attribute.name);\n      controls[attribute.name] = el.type === 'checkbox' ? el.checked : el.value;\n    });\n    return controls;\n  }\n\n  function setControlsValues() {\n    const attributes = getAttributesFromQueryParams();\n    for (const key in attributes) {\n      const el = document.getElementById(key);\n      if (el.type === 'checkbox') {\n        el.checked = attributes[key] === 'true';\n      } else {\n        el.value = attributes[key];\n      }\n    }\n  }\n\n  function setQueryParams(data) {\n    const queryString = new URLSearchParams(data).toString();\n    const url = new URL(window.location.href);\n    url.search = queryString;\n    window.history.replaceState({}, '', url);\n  }\n\n  injectMFE();\n})();\n"],
  "mappings": "CAAC,UAAY,CACX,GAAM,CAAE,SAAAA,CAAS,EAAI,OAAO,WAEtBC,EAAa,qBACbC,EAAc,sBACdC,EAAkB,0BAExB,SAASC,GAAY,CACnB,IAAMC,EAAY,SAAS,cAAcL,EAAS,GAAG,EAC/CM,EAAY,SAAS,eAAeL,CAAU,EAC9CM,EAAaC,EAAoB,EACvC,QAAWC,KAAOF,EAChBF,EAAU,aAAaI,EAAKF,EAAWE,CAAG,CAAC,EAE7CH,EAAU,YAAYD,CAAS,EAC/BK,EAAe,CACjB,CAEA,SAASF,GAAsB,CAE7B,OADuB,OAAO,SAAS,OAAO,OAAS,EAG9CG,EAA6B,GAGpCC,EAAeZ,EAAS,QAAQ,UAAU,EACnCA,EAAS,QAAQ,WAE5B,CAEA,SAASU,GAAiB,CACxB,IAAMG,EAAW,CAAC,EACZC,EAAsB,SAAS,eAAeZ,CAAW,EAE/DF,EAAS,WAAW,QAASe,GAAY,CACvCF,EAAS,KAAKG,EAAoBD,CAAO,CAAC,CAC5C,CAAC,EAEDF,EAAS,KACP,mDAAmDV,CAAe,wBACpE,EACAW,EAAoB,UAAYD,EAAS,KAAK,EAAE,EAEhDI,EAAkB,EAElB,SAAS,eAAed,CAAe,EAAE,iBAAiB,QAAUe,GAAM,CACxEA,EAAE,gBAAgB,EAClBA,EAAE,eAAe,EACjB,IAAMC,EAASC,EAAkB,EACjCR,EAAeO,CAAM,EACrB,OAAO,SAAS,OAAO,CACzB,CAAC,CACH,CAEA,SAASH,EAAoBD,EAAS,CACpC,IAAIM,EAAW,GAEf,GAAIN,EAAQ,OAAO,KAAM,CACvB,IAAMO,EAAUP,EAAQ,OAAO,KAC5B,IAAKQ,GAAQ,kBAAkBA,CAAG,KAAKA,CAAG,WAAW,EACrD,KAAK,EAAE,EAEVF,EAAW;AAAA,sBACKN,EAAQ,IAAI,eAAeA,EAAQ,QAAQ;AAAA,YACrDO,CAAO;AAAA;AAAA,OAGf,KAAO,CAEL,IAAME,EAAOT,EAAQ,OAAO,OAAS,UAAY,WAAa,OAC9DM,EAAW;AAAA,qBACIN,EAAQ,IAAI,WAAWS,CAAI,eAAeT,EAAQ,QAAQ;AAAA,OAE3E,CAEA,MAAO;AAAA;AAAA,sBAEWA,EAAQ,IAAI,KAAKA,EAAQ,IAAI;AAAA,UACzCM,CAAQ;AAAA;AAAA,KAGhB,CAEA,SAASV,GAA+B,CACtC,IAAMc,EAAS,IAAI,gBAAgB,OAAO,SAAS,MAAM,EACzD,OAAO,OAAO,YAAYA,EAAO,QAAQ,CAAC,CAC5C,CAEA,SAASL,GAAoB,CAC3B,IAAMM,EAAW,CAAC,EAClB,OAAA1B,EAAS,WAAW,QAAS2B,GAAc,CACzC,IAAMC,EAAK,SAAS,eAAeD,EAAU,IAAI,EACjDD,EAASC,EAAU,IAAI,EAAIC,EAAG,OAAS,WAAaA,EAAG,QAAUA,EAAG,KACtE,CAAC,EACMF,CACT,CAEA,SAAST,GAAoB,CAC3B,IAAMV,EAAaI,EAA6B,EAChD,QAAWF,KAAOF,EAAY,CAC5B,IAAMqB,EAAK,SAAS,eAAenB,CAAG,EAClCmB,EAAG,OAAS,WACdA,EAAG,QAAUrB,EAAWE,CAAG,IAAM,OAEjCmB,EAAG,MAAQrB,EAAWE,CAAG,CAE7B,CACF,CAEA,SAASG,EAAeiB,EAAM,CAC5B,IAAMC,EAAc,IAAI,gBAAgBD,CAAI,EAAE,SAAS,EACjDE,EAAM,IAAI,IAAI,OAAO,SAAS,IAAI,EACxCA,EAAI,OAASD,EACb,OAAO,QAAQ,aAAa,CAAC,EAAG,GAAIC,CAAG,CACzC,CAEA3B,EAAU,CACZ,GAAG",
  "names": ["manifest", "CONTENT_ID", "CONTROLS_ID", "CONTROLS_BTN_ID", "injectMFE", "component", "container", "attributes", "getAttributesForMFE", "key", "createControls", "getAttributesFromQueryParams", "setQueryParams", "elements", "controlsContainerEl", "control", "generateControlItem", "setControlsValues", "e", "values", "getControlsValues", "template", "options", "val", "type", "params", "controls", "attribute", "el", "data", "queryString", "url"]
}
