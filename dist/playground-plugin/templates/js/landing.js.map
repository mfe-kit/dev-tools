{
  "version": 3,
  "sources": ["../../../../src/playground-plugin/templates/js/landing.js"],
  "sourcesContent": ["(function () {\n  const { manifest } = window.PLAYGROUND;\n\n  const TITLE_SECTION_ID = 'title-section';\n  const EXAMPLE_CONTAINER_ID = 'example-container';\n  const ATTRIBUTES_SECTION_ID = 'attributes-section';\n  const ATTRIBUTES_TABLE_CONTAINER_ID = 'attributes-table-container';\n  const EVENTS_SECTION_ID = 'events-section';\n  const EVENTS_TABLE_CONTAINER_ID = 'events-table-container';\n  const FUNCTIONS_SECTION_ID = 'functions-section';\n  const FUNCTIONS_TABLE_CONTAINER_ID = 'functions-table-container';\n\n  function contentGenerator(sectionId, contentId, data, callback) {\n    if (sectionId && (!data || !data.length)) {\n      const el = document.getElementById(sectionId);\n      el.style.display = 'none';\n    } else {\n      const el = document.getElementById(contentId);\n      el.innerHTML = callback(data);\n    }\n  }\n\n  function generateTitleSection(data) {\n    let template = `<h1>${data.name}</h1>`;\n    template += `<table class=\"title-table\"><tbody>`;\n    if (data.description) {\n      template += `<tr><td>Description:</td><td>${data.description}</td></tr>`;\n    }\n    if (data.publisher) {\n      template += data.publisher.name\n        ? `<tr><td>Maintainer:</td><td>${data.publisher.name}</td></tr>`\n        : '';\n      template += data.publisher.email\n        ? `<tr><td>Contact:</td><td>${data.publisher.email}</td></tr>`\n        : '';\n    }\n    if (data.repository) {\n      template += `<tr><td>Repository:</td><td><a target=\"_blank\" href=\"${data.repository}\">${data.repository}</a></td></tr>`;\n    }\n    if (data.documentation) {\n      template += `<tr><td>Documentation:</td><td><a href=\"/documentation\">Link</a></td></tr>`;\n    }\n    template += `</tbody></table>`;\n    return template;\n  }\n\n  function generateExampleTemplate(data) {\n    let template =\n      '<span class=\"hljs-comment\">&lt;!-- Load the frontend bundle --&gt;</span>';\n    template += `<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">\"module\"</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"path/to/index.js\"</span>&gt;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>`;\n    template += '<span>&nbsp;</span>';\n    template += `<span class=\"hljs-comment\">&lt;!-- Use the MFE's tag --&gt;</span>`;\n    template += `<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">${manifest.tag}</span> \\n`;\n    for (const key in data) {\n      template += `  <span class=\"hljs-attr\">${key}</span>=<span class=\"hljs-string\">${data[key]}</span> \\n`;\n    }\n    template += `<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">${manifest.tag}</span>&gt;</span>`;\n    return template;\n  }\n\n  function generateAttributesTable(data) {\n    return data\n      .map(\n        (attribute) => `\n          <tr>\n              <td><span>${attribute.name}${attribute.required ? ' * ' : ''}</span></td>\n              <td><span>${attribute.schema.type}</span></td>\n              <td>${attribute.schema.enum ? attribute.schema.enum.map((item) => `<span>${item}</span>`).join(' ') : ''}</td>\n              <td>${attribute.description}</td>\n          </tr>\n        `,\n      )\n      .join(' ');\n  }\n\n  function generateEventsTable(data) {\n    return data\n      .map(\n        (event) => `\n          <tr>\n              <td><span>${event.name}</span></td>\n              <td class=\"collapsed\">\n                <button class=\"payload-btn close\">Payload <img src=\"assets/chevron.svg\" alt=\"arrow\"/></button>\n                ${schemaToJsonConverted(event)}\n              </td>\n              <td>${event.description}</td>\n          </tr>\n        `,\n      )\n      .join(' ');\n  }\n\n  function generateFunctionsTable(data) {\n    return data\n      .map(\n        (func) => `\n          <tr>\n              <td><span>${func.name}</span></td>\n              <td class=\"collapsed\">\n                <button class=\"payload-btn close\">Payload <img src=\"assets/chevron.svg\" alt=\"arrow\"/></button>\n                ${schemaToJsonConverted(func)}\n              </td>\n              <td>${func.description}</td>\n          </tr>\n        `,\n      )\n      .join(' ');\n  }\n\n  function schemaToJsonConverted(data) {\n    if (data.parameters) {\n      return `\n        <pre class=\"collapsed\"><code>${JSON.stringify(data.parameters, null, 2)}</code></pre>`;\n    } else if (data.schema) {\n      return `<pre class=\"collapsed\"><code>${JSON.stringify(data.schema.properties, null, 2)}</code></pre>`;\n    } else {\n      return `<pre class=\"collapsed\"><code>${JSON.stringify(data.schema, null, 2)}</code></pre>`;\n    }\n  }\n\n  function initEventListeners() {\n    document.addEventListener('click', function (event) {\n      const button = event.target.closest('button');\n      if (!button) {\n        return;\n      }\n\n      const table = button.closest('table');\n      if (!table) {\n        return;\n      }\n\n      const td = button.parentElement.closest('td');\n      td.classList.toggle('collapsed');\n    });\n  }\n\n  contentGenerator(null, TITLE_SECTION_ID, manifest, generateTitleSection);\n  contentGenerator(\n    null,\n    EXAMPLE_CONTAINER_ID,\n    manifest.example.attributes,\n    generateExampleTemplate,\n  );\n  contentGenerator(\n    ATTRIBUTES_SECTION_ID,\n    ATTRIBUTES_TABLE_CONTAINER_ID,\n    manifest.attributes,\n    generateAttributesTable,\n  );\n  contentGenerator(\n    EVENTS_SECTION_ID,\n    EVENTS_TABLE_CONTAINER_ID,\n    manifest.events,\n    generateEventsTable,\n  );\n  contentGenerator(\n    FUNCTIONS_SECTION_ID,\n    FUNCTIONS_TABLE_CONTAINER_ID,\n    manifest.functions,\n    generateFunctionsTable,\n  );\n  initEventListeners();\n})();\n"],
  "mappings": "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",
  "names": ["manifest", "TITLE_SECTION_ID", "EXAMPLE_CONTAINER_ID", "ATTRIBUTES_SECTION_ID", "ATTRIBUTES_TABLE_CONTAINER_ID", "EVENTS_SECTION_ID", "EVENTS_TABLE_CONTAINER_ID", "FUNCTIONS_SECTION_ID", "FUNCTIONS_TABLE_CONTAINER_ID", "contentGenerator", "sectionId", "contentId", "data", "callback", "el", "generateTitleSection", "template", "generateExampleTemplate", "key", "generateAttributesTable", "attribute", "item", "generateEventsTable", "event", "schemaToJsonConverted", "generateFunctionsTable", "func", "initEventListeners", "button"]
}
